[
  {
    "objectID": "posts/DS W4.html",
    "href": "posts/DS W4.html",
    "title": "Data Science Week3",
    "section": "",
    "text": "현재 연습 중입니다."
  },
  {
    "objectID": "posts/DS W4.html#확인",
    "href": "posts/DS W4.html#확인",
    "title": "Data Science Week3",
    "section": "",
    "text": "현재 연습 중입니다."
  },
  {
    "objectID": "posts/DS W2.html",
    "href": "posts/DS W2.html",
    "title": "Data Science Week2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# 미션 수행을 위해 데이터셋을 로드합니다.\ndf = pd.read_csv(\"https://bit.ly/telco-csv\", index_col=\"customerID\")\ndf.shape\n\n(7043, 20)\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\nDeviceProtection\nTechSupport\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\nFemale\n0\nYes\nNo\n1\nNo\nNo phone service\nDSL\nNo\nYes\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n29.85\n29.85\nNo\n\n\n5575-GNVDE\nMale\n0\nNo\nNo\n34\nYes\nNo\nDSL\nYes\nNo\nYes\nNo\nNo\nNo\nOne year\nNo\nMailed check\n56.95\n1889.5\nNo\n\n\n3668-QPYBK\nMale\n0\nNo\nNo\n2\nYes\nNo\nDSL\nYes\nYes\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nMailed check\n53.85\n108.15\nYes\n\n\n7795-CFOCW\nMale\n0\nNo\nNo\n45\nNo\nNo phone service\nDSL\nYes\nNo\nYes\nYes\nNo\nNo\nOne year\nNo\nBank transfer (automatic)\n42.30\n1840.75\nNo\n\n\n9237-HQITU\nFemale\n0\nNo\nNo\n2\nYes\nNo\nFiber optic\nNo\nNo\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n70.70\n151.65\nYes\n\n\n\n\n\n\n\n\n# TotalCharges 가 수치 타입이 아니기 때문에 수치 연산을 위해 숫자 형태로 변경합니다.\ndf[\"TotalCharges\"] = pd.to_numeric(df[\"TotalCharges\"], errors=\"coerce\")\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 7043 entries, 7590-VHVEG to 3186-AJIEK\nData columns (total 20 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   gender            7043 non-null   object \n 1   SeniorCitizen     7043 non-null   int64  \n 2   Partner           7043 non-null   object \n 3   Dependents        7043 non-null   object \n 4   tenure            7043 non-null   int64  \n 5   PhoneService      7043 non-null   object \n 6   MultipleLines     7043 non-null   object \n 7   InternetService   7043 non-null   object \n 8   OnlineSecurity    7043 non-null   object \n 9   OnlineBackup      7043 non-null   object \n 10  DeviceProtection  7043 non-null   object \n 11  TechSupport       7043 non-null   object \n 12  StreamingTV       7043 non-null   object \n 13  StreamingMovies   7043 non-null   object \n 14  Contract          7043 non-null   object \n 15  PaperlessBilling  7043 non-null   object \n 16  PaymentMethod     7043 non-null   object \n 17  MonthlyCharges    7043 non-null   float64\n 18  TotalCharges      7032 non-null   float64\n 19  Churn             7043 non-null   object \ndtypes: float64(2), int64(2), object(16)\nmemory usage: 1.1+ MB\n\n\n\ndf = df.dropna()\ndf.isnull().sum().sum()\n\n0\n\n\n\ndf2 = df.select_dtypes(include='number')\ndf2['Churn'] = df['Churn']\ndf2\n\n\n\n\n\n\n\n\nSeniorCitizen\ntenure\nMonthlyCharges\nTotalCharges\nChurn\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n7590-VHVEG\n0\n1\n29.85\n29.85\nNo\n\n\n5575-GNVDE\n0\n34\n56.95\n1889.50\nNo\n\n\n3668-QPYBK\n0\n2\n53.85\n108.15\nYes\n\n\n7795-CFOCW\n0\n45\n42.30\n1840.75\nNo\n\n\n9237-HQITU\n0\n2\n70.70\n151.65\nYes\n\n\n...\n...\n...\n...\n...\n...\n\n\n6840-RESVB\n0\n24\n84.80\n1990.50\nNo\n\n\n2234-XADUH\n0\n72\n103.20\n7362.90\nNo\n\n\n4801-JZAZL\n0\n11\n29.60\n346.45\nNo\n\n\n8361-LTMKD\n1\n4\n74.40\n306.60\nYes\n\n\n3186-AJIEK\n0\n66\n105.65\n6844.50\nNo\n\n\n\n\n7032 rows × 5 columns\n\n\n\n\nnumeric_column_names = [col for col in df.columns if col.isdigit()]\nnumeric_column_names\n\n[]\n\n\n\nplt.style.use('ggplot')\n\n# 서브플롯 생성\nfig, axes = plt.subplots(nrows=1, ncols=4, figsize=(14, 4))\n\n# 선택할 열들\nselected_columns = ['SeniorCitizen', 'tenure', 'MonthlyCharges', 'TotalCharges']\n\n# 각 열에 대한 히스토그램을 서브플롯에 그리기\nfor i, col in enumerate(selected_columns):\n    sns.histplot(x=col, hue='Churn', data=df, alpha=0.5, bins='auto', ax=axes[i], legend=True)\n\n# 서브플롯 간 간격 조절\nplt.tight_layout()\n\n\n\n\n\nsns.countplot(x='OnlineBackup', data=df, hue = 'Churn')\n\n&lt;Axes: xlabel='OnlineBackup', ylabel='count'&gt;\n\n\n\n\n\n\nnunique = df.nunique()\ncategory_col = nunique[nunique &lt; 5]\ncategory_col\n\ngender              2\nSeniorCitizen       2\nPartner             2\nDependents          2\nPhoneService        2\nMultipleLines       3\nInternetService     3\nOnlineSecurity      3\nOnlineBackup        3\nDeviceProtection    3\nTechSupport         3\nStreamingTV         3\nStreamingMovies     3\nContract            3\nPaperlessBilling    2\nPaymentMethod       4\nChurn               2\ndtype: int64\n\n\n\ncategory_col_name = category_col.index.tolist()\ncategory_col_name\n\n['gender',\n 'SeniorCitizen',\n 'Partner',\n 'Dependents',\n 'PhoneService',\n 'MultipleLines',\n 'InternetService',\n 'OnlineSecurity',\n 'OnlineBackup',\n 'DeviceProtection',\n 'TechSupport',\n 'StreamingTV',\n 'StreamingMovies',\n 'Contract',\n 'PaperlessBilling',\n 'PaymentMethod',\n 'Churn']\n\n\n\ncolumns_to_plot = [\n    'gender',\n    'SeniorCitizen',\n    'Partner',\n    'Dependents',\n    'PhoneService',\n    'MultipleLines',\n    'InternetService',\n    'OnlineSecurity',\n    'OnlineBackup',\n    'DeviceProtection',\n    'TechSupport',\n    'StreamingTV',\n    'StreamingMovies',\n    'Contract',\n    'PaperlessBilling',\n    'PaymentMethod'\n]\n\n\nfig, axes = plt.subplots(8, 2, figsize=(15, 40))\n\n# Flatten the axes array to simplify indexing\naxes = axes.flatten()\n\n# Loop through each column and plot a count plot\nfor i, column in enumerate(columns_to_plot):\n    sns.countplot(x=column, data=df, hue='Churn', ax=axes[i])\n\n\n# Adjust layout to prevent overlapping\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n\n\n\n\n\nmask = np.triu(np.ones_like(df_corr), k=0)\n\n# 히트맵 그리기\nplt.figure(figsize=(8, 6))\nsns.heatmap(df_corr, annot=True, cmap='coolwarm', mask=mask)\n\nNameError: name 'df_corr' is not defined"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "2024_Data_Science_Project",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJan 30, 2024\n\n\nData Science Week3\n\n\n유성준 \n\n\n\n\nJan 30, 2024\n\n\nData Science Week3\n\n\n유성준 \n\n\n\n\nJan 23, 2024\n\n\nData Science Week2\n\n\n유성준 \n\n\n\n\nJan 17, 2024\n\n\nData Science Week1\n\n\n유성준 \n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/DS W1.html",
    "href": "posts/DS W1.html",
    "title": "Data Science Week1",
    "section": "",
    "text": "머신러닝 모델을 실행하는 기본 과정을 이해하기 (학습 =&gt; 예측 =&gt; 평가)\n학습(fit)과 예측(predict)을 하고 평가를 하는 방법\n머신러닝 알고리즘 중에 좋은 성능을 내는 boosting 알고리즘의 기본이 되는 DecisionTree 를 사\nDecisionTree 의 기본적인 원리 이해하기\n\n\n\n\n\n통신사 고객 이탈 정보 : Kaggle 데이터셋( https://www.kaggle.com/blastchar/telco-customer-churn )\n구성 : 고객 인구 통계 정보, 고객 이탈, 서비스 가입 정보, 고객 계정 정보 등등\n\n\n\n\n\n이탈 예측 모델링, 고객 세분화, 원인 분석, 추천 시스템 개선, 고객 유지 전략 개발 등등\n\n\n\n\n\n# 필요한 라이브러리를 로드\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# 데이터 로드\ndf = pd.read_csv(\"https://bit.ly/telco-csv\", index_col=\"customerID\")\ndf.head(2)\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\nDeviceProtection\nTechSupport\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\nFemale\n0\nYes\nNo\n1\nNo\nNo phone service\nDSL\nNo\nYes\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n29.85\n29.85\nNo\n\n\n5575-GNVDE\nMale\n0\nNo\nNo\n34\nYes\nNo\nDSL\nYes\nNo\nYes\nNo\nNo\nNo\nOne year\nNo\nMailed check\n56.95\n1889.5\nNo\n\n\n\n\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 7043 entries, 7590-VHVEG to 3186-AJIEK\nData columns (total 20 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   gender            7043 non-null   object \n 1   SeniorCitizen     7043 non-null   int64  \n 2   Partner           7043 non-null   object \n 3   Dependents        7043 non-null   object \n 4   tenure            7043 non-null   int64  \n 5   PhoneService      7043 non-null   object \n 6   MultipleLines     7043 non-null   object \n 7   InternetService   7043 non-null   object \n 8   OnlineSecurity    7043 non-null   object \n 9   OnlineBackup      7043 non-null   object \n 10  DeviceProtection  7043 non-null   object \n 11  TechSupport       7043 non-null   object \n 12  StreamingTV       7043 non-null   object \n 13  StreamingMovies   7043 non-null   object \n 14  Contract          7043 non-null   object \n 15  PaperlessBilling  7043 non-null   object \n 16  PaymentMethod     7043 non-null   object \n 17  MonthlyCharges    7043 non-null   float64\n 18  TotalCharges      7043 non-null   object \n 19  Churn             7043 non-null   object \ndtypes: float64(1), int64(2), object(17)\nmemory usage: 1.1+ MB\n\n\n\n# 숫자형태의 문자열을 숫자형으로 전환\ndf[\"TotalCharges\"] = df[\"TotalCharges\"].str.strip().replace(\"\", np.nan).astype(float)\n\n\n# 결측치 제거(결측치를 채우는 방법도 존재한다)\ndf = df.dropna()\ndf.isnull().sum().sum()\n\n0\n\n\n\n# 바이너리 변수 인코딩을 위해 범주 값이 2개로 되어 있는 이진값으로 인코딩이 가능한 변수 탐색\nnuniq = df.nunique()\nbi_cols = nuniq[nuniq == 2].index\nbi_cols\n\nIndex(['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'PhoneService',\n       'PaperlessBilling', 'Churn'],\n      dtype='object')\n\n\n\n# 바이너리 변수에 대한 인코딩\ndf[\"gender_encode\"] = (df[\"gender\"] == \"Male\").astype(int)\ndf[\"Partner_encode\"] = (df[\"Partner\"] == \"Yes\").astype(int)\ndf[\"Dependents_encode\"] = (df[\"Dependents\"] == \"Yes\").astype(int)\ndf[\"PhoneService_encode\"] = (df[\"PhoneService\"] == \"Yes\").astype(int)\ndf[\"PaperlessBilling_encode\"] = (df[\"PaperlessBilling\"] == \"Yes\").astype(int)\ndf\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\n...\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\ngender_encode\nPartner_encode\nDependents_encode\nPhoneService_encode\nPaperlessBilling_encode\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\nFemale\n0\nYes\nNo\n1\nNo\nNo phone service\nDSL\nNo\nYes\n...\nYes\nElectronic check\n29.85\n29.85\nNo\n0\n1\n0\n0\n1\n\n\n5575-GNVDE\nMale\n0\nNo\nNo\n34\nYes\nNo\nDSL\nYes\nNo\n...\nNo\nMailed check\n56.95\n1889.50\nNo\n1\n0\n0\n1\n0\n\n\n3668-QPYBK\nMale\n0\nNo\nNo\n2\nYes\nNo\nDSL\nYes\nYes\n...\nYes\nMailed check\n53.85\n108.15\nYes\n1\n0\n0\n1\n1\n\n\n7795-CFOCW\nMale\n0\nNo\nNo\n45\nNo\nNo phone service\nDSL\nYes\nNo\n...\nNo\nBank transfer (automatic)\n42.30\n1840.75\nNo\n1\n0\n0\n0\n0\n\n\n9237-HQITU\nFemale\n0\nNo\nNo\n2\nYes\nNo\nFiber optic\nNo\nNo\n...\nYes\nElectronic check\n70.70\n151.65\nYes\n0\n0\n0\n1\n1\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n6840-RESVB\nMale\n0\nYes\nYes\n24\nYes\nYes\nDSL\nYes\nNo\n...\nYes\nMailed check\n84.80\n1990.50\nNo\n1\n1\n1\n1\n1\n\n\n2234-XADUH\nFemale\n0\nYes\nYes\n72\nYes\nYes\nFiber optic\nNo\nYes\n...\nYes\nCredit card (automatic)\n103.20\n7362.90\nNo\n0\n1\n1\n1\n1\n\n\n4801-JZAZL\nFemale\n0\nYes\nYes\n11\nNo\nNo phone service\nDSL\nYes\nNo\n...\nYes\nElectronic check\n29.60\n346.45\nNo\n0\n1\n1\n0\n1\n\n\n8361-LTMKD\nMale\n1\nYes\nNo\n4\nYes\nYes\nFiber optic\nNo\nNo\n...\nYes\nMailed check\n74.40\n306.60\nYes\n1\n1\n0\n1\n1\n\n\n3186-AJIEK\nMale\n0\nNo\nNo\n66\nYes\nNo\nFiber optic\nYes\nNo\n...\nYes\nBank transfer (automatic)\n105.65\n6844.50\nNo\n1\n0\n0\n1\n1\n\n\n\n\n7032 rows × 25 columns\n\n\n\n\n\n\n\n# 학습 예측에 사용할 열 추출\nfeature_names = df.select_dtypes(include=\"number\").columns\nfeature_names\n\nIndex(['SeniorCitizen', 'tenure', 'MonthlyCharges', 'TotalCharges',\n       'gender_encode', 'Partner_encode', 'Dependents_encode',\n       'PhoneService_encode', 'PaperlessBilling_encode'],\n      dtype='object')\n\n\n\nX = df[feature_names]\ny = df[[\"Churn\"]]\ndisplay(X.head(2))\ndisplay(y.head(2))\nX.shape, y.shape\n\n\n\n\n\n\n\n\nSeniorCitizen\ntenure\nMonthlyCharges\nTotalCharges\ngender_encode\nPartner_encode\nDependents_encode\nPhoneService_encode\nPaperlessBilling_encode\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\n0\n1\n29.85\n29.85\n0\n1\n0\n0\n1\n\n\n5575-GNVDE\n0\n34\n56.95\n1889.50\n1\n0\n0\n1\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChurn\n\n\ncustomerID\n\n\n\n\n\n7590-VHVEG\nNo\n\n\n5575-GNVDE\nNo\n\n\n\n\n\n\n\n((7032, 9), (7032, 1))\n\n\n\n# train 과 test 로 나누기 위해 데이터를 80:20으로 나눔\nsplit_count = int(df.shape[0] * 0.8)\nsplit_count\n\n5625\n\n\n\n# 데이터의 80:20으로 데이터(X)를 train, test로 나눔\n# 데이터의 80:20으로 정답 데이터(y)를 train, test로 나눔\nX_train = X.iloc[:split_count]\ny_train = y.iloc[:split_count]\n\nX_test = X.iloc[split_count:]\ny_test = y.iloc[split_count:]\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape\n\n((5625, 9), (1407, 9), (5625, 1), (1407, 1))\n\n\n\n\n\n\n# 모델 학습\nfrom sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(criterion=\"entropy\",\n                               max_depth=6,\n                               max_features=0.9,\n                               random_state=42)\nmodel.fit(X_train, y_train)\n\nDecisionTreeClassifier(criterion='entropy', max_depth=6, max_features=0.9,\n                       random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.DecisionTreeClassifierDecisionTreeClassifier(criterion='entropy', max_depth=6, max_features=0.9,\n                       random_state=42)\n\n\n\ny_predict = model.predict(X_test)\ny_predict[:5]\n\narray(['No', 'No', 'No', 'No', 'No'], dtype=object)\n\n\n\n\n\n\n# 네트워크 시각화\nfrom sklearn.tree import plot_tree\nplt.figure(figsize=(20, 10))\nplot_tree(model, filled=True, feature_names=X_train.columns, class_names=['No','Yes'], max_depth=3)\n\n[Text(0.5, 0.9, 'tenure &lt;= 19.5\\nentropy = 0.834\\nsamples = 5625\\nvalue = [4137, 1488]\\nclass = No'),\n Text(0.25, 0.7, 'MonthlyCharges &lt;= 68.425\\nentropy = 0.989\\nsamples = 2242\\nvalue = [1258, 984]\\nclass = No'),\n Text(0.125, 0.5, 'tenure &lt;= 3.5\\nentropy = 0.854\\nsamples = 1223\\nvalue = [882, 341]\\nclass = No'),\n Text(0.0625, 0.3, 'MonthlyCharges &lt;= 20.875\\nentropy = 0.985\\nsamples = 487\\nvalue = [279, 208]\\nclass = No'),\n Text(0.03125, 0.1, '\\n  (...)  \\n'),\n Text(0.09375, 0.1, '\\n  (...)  \\n'),\n Text(0.1875, 0.3, 'MonthlyCharges &lt;= 27.425\\nentropy = 0.682\\nsamples = 736\\nvalue = [603, 133]\\nclass = No'),\n Text(0.15625, 0.1, '\\n  (...)  \\n'),\n Text(0.21875, 0.1, '\\n  (...)  \\n'),\n Text(0.375, 0.5, 'TotalCharges &lt;= 120.0\\nentropy = 0.95\\nsamples = 1019\\nvalue = [376, 643]\\nclass = Yes'),\n Text(0.3125, 0.3, 'TotalCharges &lt;= 69.875\\nentropy = 0.672\\nsamples = 187\\nvalue = [33, 154]\\nclass = Yes'),\n Text(0.28125, 0.1, '\\n  (...)  \\n'),\n Text(0.34375, 0.1, '\\n  (...)  \\n'),\n Text(0.4375, 0.3, 'MonthlyCharges &lt;= 73.675\\nentropy = 0.978\\nsamples = 832\\nvalue = [343, 489]\\nclass = Yes'),\n Text(0.40625, 0.1, '\\n  (...)  \\n'),\n Text(0.46875, 0.1, '\\n  (...)  \\n'),\n Text(0.75, 0.7, 'MonthlyCharges &lt;= 69.975\\nentropy = 0.607\\nsamples = 3383\\nvalue = [2879, 504]\\nclass = No'),\n Text(0.625, 0.5, 'MonthlyCharges &lt;= 28.55\\nentropy = 0.319\\nsamples = 1435\\nvalue = [1352, 83]\\nclass = No'),\n Text(0.5625, 0.3, 'tenure &lt;= 61.5\\nentropy = 0.116\\nsamples = 706\\nvalue = [695, 11]\\nclass = No'),\n Text(0.53125, 0.1, '\\n  (...)  \\n'),\n Text(0.59375, 0.1, '\\n  (...)  \\n'),\n Text(0.6875, 0.3, 'tenure &lt;= 60.5\\nentropy = 0.465\\nsamples = 729\\nvalue = [657, 72]\\nclass = No'),\n Text(0.65625, 0.1, '\\n  (...)  \\n'),\n Text(0.71875, 0.1, '\\n  (...)  \\n'),\n Text(0.875, 0.5, 'TotalCharges &lt;= 3764.7\\nentropy = 0.753\\nsamples = 1948\\nvalue = [1527, 421]\\nclass = No'),\n Text(0.8125, 0.3, 'PaperlessBilling_encode &lt;= 0.5\\nentropy = 0.934\\nsamples = 660\\nvalue = [429, 231]\\nclass = No'),\n Text(0.78125, 0.1, '\\n  (...)  \\n'),\n Text(0.84375, 0.1, '\\n  (...)  \\n'),\n Text(0.9375, 0.3, 'tenure &lt;= 70.5\\nentropy = 0.604\\nsamples = 1288\\nvalue = [1098, 190]\\nclass = No'),\n Text(0.90625, 0.1, '\\n  (...)  \\n'),\n Text(0.96875, 0.1, '\\n  (...)  \\n')]\n\n\n\n\n\n\n# 피처의 중요도 시각화\nsns.barplot(x=model.feature_importances_, y=feature_names,palette='viridis')\n\n/tmp/ipykernel_9474/2619136544.py:2: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(x=model.feature_importances_, y=feature_names,palette='viridis')\n\n\n&lt;Axes: ylabel='None'&gt;\n\n\n\n\n\n\n# 예측과 실제 정답으로 정확도 확인\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_predict)\n\n0.7896233120113717"
  },
  {
    "objectID": "posts/DS W1.html#학습-목표",
    "href": "posts/DS W1.html#학습-목표",
    "title": "Data Science Week1",
    "section": "",
    "text": "머신러닝 모델을 실행하는 기본 과정을 이해하기 (학습 =&gt; 예측 =&gt; 평가)\n학습(fit)과 예측(predict)을 하고 평가를 하는 방법\n머신러닝 알고리즘 중에 좋은 성능을 내는 boosting 알고리즘의 기본이 되는 DecisionTree 를 사\nDecisionTree 의 기본적인 원리 이해하기"
  },
  {
    "objectID": "posts/DS W1.html#데이터셋",
    "href": "posts/DS W1.html#데이터셋",
    "title": "Data Science Week1",
    "section": "",
    "text": "통신사 고객 이탈 정보 : Kaggle 데이터셋( https://www.kaggle.com/blastchar/telco-customer-churn )\n구성 : 고객 인구 통계 정보, 고객 이탈, 서비스 가입 정보, 고객 계정 정보 등등"
  },
  {
    "objectID": "posts/DS W1.html#이번-학습을-적용시킬-수-있는-현실-문제",
    "href": "posts/DS W1.html#이번-학습을-적용시킬-수-있는-현실-문제",
    "title": "Data Science Week1",
    "section": "",
    "text": "이탈 예측 모델링, 고객 세분화, 원인 분석, 추천 시스템 개선, 고객 유지 전략 개발 등등"
  },
  {
    "objectID": "posts/DS W1.html#실습",
    "href": "posts/DS W1.html#실습",
    "title": "Data Science Week1",
    "section": "",
    "text": "# 필요한 라이브러리를 로드\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# 데이터 로드\ndf = pd.read_csv(\"https://bit.ly/telco-csv\", index_col=\"customerID\")\ndf.head(2)\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\nDeviceProtection\nTechSupport\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\nFemale\n0\nYes\nNo\n1\nNo\nNo phone service\nDSL\nNo\nYes\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n29.85\n29.85\nNo\n\n\n5575-GNVDE\nMale\n0\nNo\nNo\n34\nYes\nNo\nDSL\nYes\nNo\nYes\nNo\nNo\nNo\nOne year\nNo\nMailed check\n56.95\n1889.5\nNo\n\n\n\n\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 7043 entries, 7590-VHVEG to 3186-AJIEK\nData columns (total 20 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   gender            7043 non-null   object \n 1   SeniorCitizen     7043 non-null   int64  \n 2   Partner           7043 non-null   object \n 3   Dependents        7043 non-null   object \n 4   tenure            7043 non-null   int64  \n 5   PhoneService      7043 non-null   object \n 6   MultipleLines     7043 non-null   object \n 7   InternetService   7043 non-null   object \n 8   OnlineSecurity    7043 non-null   object \n 9   OnlineBackup      7043 non-null   object \n 10  DeviceProtection  7043 non-null   object \n 11  TechSupport       7043 non-null   object \n 12  StreamingTV       7043 non-null   object \n 13  StreamingMovies   7043 non-null   object \n 14  Contract          7043 non-null   object \n 15  PaperlessBilling  7043 non-null   object \n 16  PaymentMethod     7043 non-null   object \n 17  MonthlyCharges    7043 non-null   float64\n 18  TotalCharges      7043 non-null   object \n 19  Churn             7043 non-null   object \ndtypes: float64(1), int64(2), object(17)\nmemory usage: 1.1+ MB\n\n\n\n# 숫자형태의 문자열을 숫자형으로 전환\ndf[\"TotalCharges\"] = df[\"TotalCharges\"].str.strip().replace(\"\", np.nan).astype(float)\n\n\n# 결측치 제거(결측치를 채우는 방법도 존재한다)\ndf = df.dropna()\ndf.isnull().sum().sum()\n\n0\n\n\n\n# 바이너리 변수 인코딩을 위해 범주 값이 2개로 되어 있는 이진값으로 인코딩이 가능한 변수 탐색\nnuniq = df.nunique()\nbi_cols = nuniq[nuniq == 2].index\nbi_cols\n\nIndex(['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'PhoneService',\n       'PaperlessBilling', 'Churn'],\n      dtype='object')\n\n\n\n# 바이너리 변수에 대한 인코딩\ndf[\"gender_encode\"] = (df[\"gender\"] == \"Male\").astype(int)\ndf[\"Partner_encode\"] = (df[\"Partner\"] == \"Yes\").astype(int)\ndf[\"Dependents_encode\"] = (df[\"Dependents\"] == \"Yes\").astype(int)\ndf[\"PhoneService_encode\"] = (df[\"PhoneService\"] == \"Yes\").astype(int)\ndf[\"PaperlessBilling_encode\"] = (df[\"PaperlessBilling\"] == \"Yes\").astype(int)\ndf\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\n...\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\ngender_encode\nPartner_encode\nDependents_encode\nPhoneService_encode\nPaperlessBilling_encode\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\nFemale\n0\nYes\nNo\n1\nNo\nNo phone service\nDSL\nNo\nYes\n...\nYes\nElectronic check\n29.85\n29.85\nNo\n0\n1\n0\n0\n1\n\n\n5575-GNVDE\nMale\n0\nNo\nNo\n34\nYes\nNo\nDSL\nYes\nNo\n...\nNo\nMailed check\n56.95\n1889.50\nNo\n1\n0\n0\n1\n0\n\n\n3668-QPYBK\nMale\n0\nNo\nNo\n2\nYes\nNo\nDSL\nYes\nYes\n...\nYes\nMailed check\n53.85\n108.15\nYes\n1\n0\n0\n1\n1\n\n\n7795-CFOCW\nMale\n0\nNo\nNo\n45\nNo\nNo phone service\nDSL\nYes\nNo\n...\nNo\nBank transfer (automatic)\n42.30\n1840.75\nNo\n1\n0\n0\n0\n0\n\n\n9237-HQITU\nFemale\n0\nNo\nNo\n2\nYes\nNo\nFiber optic\nNo\nNo\n...\nYes\nElectronic check\n70.70\n151.65\nYes\n0\n0\n0\n1\n1\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n6840-RESVB\nMale\n0\nYes\nYes\n24\nYes\nYes\nDSL\nYes\nNo\n...\nYes\nMailed check\n84.80\n1990.50\nNo\n1\n1\n1\n1\n1\n\n\n2234-XADUH\nFemale\n0\nYes\nYes\n72\nYes\nYes\nFiber optic\nNo\nYes\n...\nYes\nCredit card (automatic)\n103.20\n7362.90\nNo\n0\n1\n1\n1\n1\n\n\n4801-JZAZL\nFemale\n0\nYes\nYes\n11\nNo\nNo phone service\nDSL\nYes\nNo\n...\nYes\nElectronic check\n29.60\n346.45\nNo\n0\n1\n1\n0\n1\n\n\n8361-LTMKD\nMale\n1\nYes\nNo\n4\nYes\nYes\nFiber optic\nNo\nNo\n...\nYes\nMailed check\n74.40\n306.60\nYes\n1\n1\n0\n1\n1\n\n\n3186-AJIEK\nMale\n0\nNo\nNo\n66\nYes\nNo\nFiber optic\nYes\nNo\n...\nYes\nBank transfer (automatic)\n105.65\n6844.50\nNo\n1\n0\n0\n1\n1\n\n\n\n\n7032 rows × 25 columns"
  },
  {
    "objectID": "posts/DS W1.html#미션1.-훈련데이터와-평가데이터-나누기",
    "href": "posts/DS W1.html#미션1.-훈련데이터와-평가데이터-나누기",
    "title": "Data Science Week1",
    "section": "",
    "text": "# 학습 예측에 사용할 열 추출\nfeature_names = df.select_dtypes(include=\"number\").columns\nfeature_names\n\nIndex(['SeniorCitizen', 'tenure', 'MonthlyCharges', 'TotalCharges',\n       'gender_encode', 'Partner_encode', 'Dependents_encode',\n       'PhoneService_encode', 'PaperlessBilling_encode'],\n      dtype='object')\n\n\n\nX = df[feature_names]\ny = df[[\"Churn\"]]\ndisplay(X.head(2))\ndisplay(y.head(2))\nX.shape, y.shape\n\n\n\n\n\n\n\n\nSeniorCitizen\ntenure\nMonthlyCharges\nTotalCharges\ngender_encode\nPartner_encode\nDependents_encode\nPhoneService_encode\nPaperlessBilling_encode\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\n0\n1\n29.85\n29.85\n0\n1\n0\n0\n1\n\n\n5575-GNVDE\n0\n34\n56.95\n1889.50\n1\n0\n0\n1\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChurn\n\n\ncustomerID\n\n\n\n\n\n7590-VHVEG\nNo\n\n\n5575-GNVDE\nNo\n\n\n\n\n\n\n\n((7032, 9), (7032, 1))\n\n\n\n# train 과 test 로 나누기 위해 데이터를 80:20으로 나눔\nsplit_count = int(df.shape[0] * 0.8)\nsplit_count\n\n5625\n\n\n\n# 데이터의 80:20으로 데이터(X)를 train, test로 나눔\n# 데이터의 80:20으로 정답 데이터(y)를 train, test로 나눔\nX_train = X.iloc[:split_count]\ny_train = y.iloc[:split_count]\n\nX_test = X.iloc[split_count:]\ny_test = y.iloc[split_count:]\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape\n\n((5625, 9), (1407, 9), (5625, 1), (1407, 1))"
  },
  {
    "objectID": "posts/DS W1.html#미션2.-머신러닝-알고리즘-모델로-학습과-예측하기",
    "href": "posts/DS W1.html#미션2.-머신러닝-알고리즘-모델로-학습과-예측하기",
    "title": "Data Science Week1",
    "section": "",
    "text": "# 모델 학습\nfrom sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(criterion=\"entropy\",\n                               max_depth=6,\n                               max_features=0.9,\n                               random_state=42)\nmodel.fit(X_train, y_train)\n\nDecisionTreeClassifier(criterion='entropy', max_depth=6, max_features=0.9,\n                       random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.DecisionTreeClassifierDecisionTreeClassifier(criterion='entropy', max_depth=6, max_features=0.9,\n                       random_state=42)\n\n\n\ny_predict = model.predict(X_test)\ny_predict[:5]\n\narray(['No', 'No', 'No', 'No', 'No'], dtype=object)"
  },
  {
    "objectID": "posts/DS W1.html#미션3.-점수-측정하고-피처의-중요도-시각화",
    "href": "posts/DS W1.html#미션3.-점수-측정하고-피처의-중요도-시각화",
    "title": "Data Science Week1",
    "section": "",
    "text": "# 네트워크 시각화\nfrom sklearn.tree import plot_tree\nplt.figure(figsize=(20, 10))\nplot_tree(model, filled=True, feature_names=X_train.columns, class_names=['No','Yes'], max_depth=3)\n\n[Text(0.5, 0.9, 'tenure &lt;= 19.5\\nentropy = 0.834\\nsamples = 5625\\nvalue = [4137, 1488]\\nclass = No'),\n Text(0.25, 0.7, 'MonthlyCharges &lt;= 68.425\\nentropy = 0.989\\nsamples = 2242\\nvalue = [1258, 984]\\nclass = No'),\n Text(0.125, 0.5, 'tenure &lt;= 3.5\\nentropy = 0.854\\nsamples = 1223\\nvalue = [882, 341]\\nclass = No'),\n Text(0.0625, 0.3, 'MonthlyCharges &lt;= 20.875\\nentropy = 0.985\\nsamples = 487\\nvalue = [279, 208]\\nclass = No'),\n Text(0.03125, 0.1, '\\n  (...)  \\n'),\n Text(0.09375, 0.1, '\\n  (...)  \\n'),\n Text(0.1875, 0.3, 'MonthlyCharges &lt;= 27.425\\nentropy = 0.682\\nsamples = 736\\nvalue = [603, 133]\\nclass = No'),\n Text(0.15625, 0.1, '\\n  (...)  \\n'),\n Text(0.21875, 0.1, '\\n  (...)  \\n'),\n Text(0.375, 0.5, 'TotalCharges &lt;= 120.0\\nentropy = 0.95\\nsamples = 1019\\nvalue = [376, 643]\\nclass = Yes'),\n Text(0.3125, 0.3, 'TotalCharges &lt;= 69.875\\nentropy = 0.672\\nsamples = 187\\nvalue = [33, 154]\\nclass = Yes'),\n Text(0.28125, 0.1, '\\n  (...)  \\n'),\n Text(0.34375, 0.1, '\\n  (...)  \\n'),\n Text(0.4375, 0.3, 'MonthlyCharges &lt;= 73.675\\nentropy = 0.978\\nsamples = 832\\nvalue = [343, 489]\\nclass = Yes'),\n Text(0.40625, 0.1, '\\n  (...)  \\n'),\n Text(0.46875, 0.1, '\\n  (...)  \\n'),\n Text(0.75, 0.7, 'MonthlyCharges &lt;= 69.975\\nentropy = 0.607\\nsamples = 3383\\nvalue = [2879, 504]\\nclass = No'),\n Text(0.625, 0.5, 'MonthlyCharges &lt;= 28.55\\nentropy = 0.319\\nsamples = 1435\\nvalue = [1352, 83]\\nclass = No'),\n Text(0.5625, 0.3, 'tenure &lt;= 61.5\\nentropy = 0.116\\nsamples = 706\\nvalue = [695, 11]\\nclass = No'),\n Text(0.53125, 0.1, '\\n  (...)  \\n'),\n Text(0.59375, 0.1, '\\n  (...)  \\n'),\n Text(0.6875, 0.3, 'tenure &lt;= 60.5\\nentropy = 0.465\\nsamples = 729\\nvalue = [657, 72]\\nclass = No'),\n Text(0.65625, 0.1, '\\n  (...)  \\n'),\n Text(0.71875, 0.1, '\\n  (...)  \\n'),\n Text(0.875, 0.5, 'TotalCharges &lt;= 3764.7\\nentropy = 0.753\\nsamples = 1948\\nvalue = [1527, 421]\\nclass = No'),\n Text(0.8125, 0.3, 'PaperlessBilling_encode &lt;= 0.5\\nentropy = 0.934\\nsamples = 660\\nvalue = [429, 231]\\nclass = No'),\n Text(0.78125, 0.1, '\\n  (...)  \\n'),\n Text(0.84375, 0.1, '\\n  (...)  \\n'),\n Text(0.9375, 0.3, 'tenure &lt;= 70.5\\nentropy = 0.604\\nsamples = 1288\\nvalue = [1098, 190]\\nclass = No'),\n Text(0.90625, 0.1, '\\n  (...)  \\n'),\n Text(0.96875, 0.1, '\\n  (...)  \\n')]\n\n\n\n\n\n\n# 피처의 중요도 시각화\nsns.barplot(x=model.feature_importances_, y=feature_names,palette='viridis')\n\n/tmp/ipykernel_9474/2619136544.py:2: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(x=model.feature_importances_, y=feature_names,palette='viridis')\n\n\n&lt;Axes: ylabel='None'&gt;\n\n\n\n\n\n\n# 예측과 실제 정답으로 정확도 확인\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_predict)\n\n0.7896233120113717"
  },
  {
    "objectID": "posts/DS W3.html",
    "href": "posts/DS W3.html",
    "title": "Data Science Week3",
    "section": "",
    "text": "피처 엔지니어링(Feature Engineering)은 머신러닝 모델을 훈련시키기 위해 입력 데이터로 사용되는 피처(또는 변수)들을 가공하거나 새로운 피처를 만들어내는 과정을 말합니다. 피처 엔지니어링은 머신러닝 성능을 향상시키고 모델의 일반화 성능을 향상시키는 데 핵심적인 역할을 합니다. 현실 세계의 데이터는 종종 불완전하고 노이즈가 많습니다. 결측값, 이상치, 오류 등이 있을 수 있습니다. 종속 변수와의 관계를 강화하고 모델이 더 나은 예측을 할 수 있도록 도와줍니다. 예를 들어, 특정 도메인 지식을 활용하여 새로운 피처를 생성하거나 기존 피처를 변형시켜 모델이 패턴을 더 잘 파악하도록 할 수 있습니다. 불필요한 피처를 제거하거나 피처를 효과적으로 변형함으로써 모델의 계산 효율성을 높일 수 있습니다. 이는 모델을 더 빠르게 훈련시키고 실행시킬 수 있습니다.\n미션 데이터셋 소개\n\n해당 Kaggle 데이터셋( https://www.kaggle.com/blastchar/telco-customer-churn )은 통신사 고객 이탈(Churn)에 대한 정보를 담고 있습니다. IBM에서 제공한 이 데이터셋은 고객 유지에 필요한 행동을 예측하는 데 사용될 수 있으며, 고객 데이터를 분석하여 고객 유지 프로그램을 개발하는 데 도움이 됩니다.\n해당 데이터셋은 다음의 정보로 구성되어 있습니다.\n\n고객 인구 통계 정보(Demographic info): 고객의 성별, 연령대, 배우자 및 부양 가족의 유무(Gender, SeniorCitizen, Partner, Dependents) 등에 관한 정보가 포함되어 있습니다.\n고객 이탈(Churn) 정보: 서비스를 중단 여부에 대한 정보가 포함되어 있습니다.\n서비스 가입 정보(Services subscribed): 고객들이 가입한 서비스들, 예를 들어 전화, 다중 라인, 인터넷, 온라인 보안, 온라인 백업, 장치 보호, 기술 지원, 스트리밍 TV 및 영화( honeService, MultipleLine, InternetService, OnlineSecurity, OnlineBackup, DeviceProtection, TechSupport, StreamingTV, StreamingMovies) 등에 대한 정보가 있습니다.\n고객 계정 정보(Customer account info): 고객이 얼마나 오래 서비스를 이용했는지, 계약 유형, 결제 방법, 무페이퍼 청구 여부, 월별 요금, 총 요금 (CustomerID, Contract, PaperlessBilling, PaymentMethod, MonthlyCharges, TotalCharges, Tenure)등의 정보가 담겨 있습니다.\n\n\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# 미션 수행을 위해 데이터셋을 로드합니다.\ndf = pd.read_csv(\"https://bit.ly/telco-csv\", index_col=\"customerID\")\ndf.shape\n\n(7043, 20)\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\nDeviceProtection\nTechSupport\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\nFemale\n0\nYes\nNo\n1\nNo\nNo phone service\nDSL\nNo\nYes\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n29.85\n29.85\nNo\n\n\n5575-GNVDE\nMale\n0\nNo\nNo\n34\nYes\nNo\nDSL\nYes\nNo\nYes\nNo\nNo\nNo\nOne year\nNo\nMailed check\n56.95\n1889.5\nNo\n\n\n3668-QPYBK\nMale\n0\nNo\nNo\n2\nYes\nNo\nDSL\nYes\nYes\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nMailed check\n53.85\n108.15\nYes\n\n\n7795-CFOCW\nMale\n0\nNo\nNo\n45\nNo\nNo phone service\nDSL\nYes\nNo\nYes\nYes\nNo\nNo\nOne year\nNo\nBank transfer (automatic)\n42.30\n1840.75\nNo\n\n\n9237-HQITU\nFemale\n0\nNo\nNo\n2\nYes\nNo\nFiber optic\nNo\nNo\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n70.70\n151.65\nYes\n\n\n\n\n\n\n\n\n# TotalCharges 가 수치 타입이 아니기 때문에 수치 연산을 위해 숫자 형태로 변경합니다.\ndf[\"TotalCharges\"] = pd.to_numeric(df[\"TotalCharges\"], errors=\"coerce\")\n\n\ndf = df.dropna()"
  },
  {
    "objectID": "posts/DS W3.html#주차-미션-소개---피처-엔지니어링feature-engineering",
    "href": "posts/DS W3.html#주차-미션-소개---피처-엔지니어링feature-engineering",
    "title": "Data Science Week3",
    "section": "",
    "text": "피처 엔지니어링(Feature Engineering)은 머신러닝 모델을 훈련시키기 위해 입력 데이터로 사용되는 피처(또는 변수)들을 가공하거나 새로운 피처를 만들어내는 과정을 말합니다. 피처 엔지니어링은 머신러닝 성능을 향상시키고 모델의 일반화 성능을 향상시키는 데 핵심적인 역할을 합니다. 현실 세계의 데이터는 종종 불완전하고 노이즈가 많습니다. 결측값, 이상치, 오류 등이 있을 수 있습니다. 종속 변수와의 관계를 강화하고 모델이 더 나은 예측을 할 수 있도록 도와줍니다. 예를 들어, 특정 도메인 지식을 활용하여 새로운 피처를 생성하거나 기존 피처를 변형시켜 모델이 패턴을 더 잘 파악하도록 할 수 있습니다. 불필요한 피처를 제거하거나 피처를 효과적으로 변형함으로써 모델의 계산 효율성을 높일 수 있습니다. 이는 모델을 더 빠르게 훈련시키고 실행시킬 수 있습니다.\n미션 데이터셋 소개\n\n해당 Kaggle 데이터셋( https://www.kaggle.com/blastchar/telco-customer-churn )은 통신사 고객 이탈(Churn)에 대한 정보를 담고 있습니다. IBM에서 제공한 이 데이터셋은 고객 유지에 필요한 행동을 예측하는 데 사용될 수 있으며, 고객 데이터를 분석하여 고객 유지 프로그램을 개발하는 데 도움이 됩니다.\n해당 데이터셋은 다음의 정보로 구성되어 있습니다.\n\n고객 인구 통계 정보(Demographic info): 고객의 성별, 연령대, 배우자 및 부양 가족의 유무(Gender, SeniorCitizen, Partner, Dependents) 등에 관한 정보가 포함되어 있습니다.\n고객 이탈(Churn) 정보: 서비스를 중단 여부에 대한 정보가 포함되어 있습니다.\n서비스 가입 정보(Services subscribed): 고객들이 가입한 서비스들, 예를 들어 전화, 다중 라인, 인터넷, 온라인 보안, 온라인 백업, 장치 보호, 기술 지원, 스트리밍 TV 및 영화( honeService, MultipleLine, InternetService, OnlineSecurity, OnlineBackup, DeviceProtection, TechSupport, StreamingTV, StreamingMovies) 등에 대한 정보가 있습니다.\n고객 계정 정보(Customer account info): 고객이 얼마나 오래 서비스를 이용했는지, 계약 유형, 결제 방법, 무페이퍼 청구 여부, 월별 요금, 총 요금 (CustomerID, Contract, PaperlessBilling, PaymentMethod, MonthlyCharges, TotalCharges, Tenure)등의 정보가 담겨 있습니다.\n\n\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# 미션 수행을 위해 데이터셋을 로드합니다.\ndf = pd.read_csv(\"https://bit.ly/telco-csv\", index_col=\"customerID\")\ndf.shape\n\n(7043, 20)\n\n\n\ndf.head()\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\nDeviceProtection\nTechSupport\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\nFemale\n0\nYes\nNo\n1\nNo\nNo phone service\nDSL\nNo\nYes\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n29.85\n29.85\nNo\n\n\n5575-GNVDE\nMale\n0\nNo\nNo\n34\nYes\nNo\nDSL\nYes\nNo\nYes\nNo\nNo\nNo\nOne year\nNo\nMailed check\n56.95\n1889.5\nNo\n\n\n3668-QPYBK\nMale\n0\nNo\nNo\n2\nYes\nNo\nDSL\nYes\nYes\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nMailed check\n53.85\n108.15\nYes\n\n\n7795-CFOCW\nMale\n0\nNo\nNo\n45\nNo\nNo phone service\nDSL\nYes\nNo\nYes\nYes\nNo\nNo\nOne year\nNo\nBank transfer (automatic)\n42.30\n1840.75\nNo\n\n\n9237-HQITU\nFemale\n0\nNo\nNo\n2\nYes\nNo\nFiber optic\nNo\nNo\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n70.70\n151.65\nYes\n\n\n\n\n\n\n\n\n# TotalCharges 가 수치 타입이 아니기 때문에 수치 연산을 위해 숫자 형태로 변경합니다.\ndf[\"TotalCharges\"] = pd.to_numeric(df[\"TotalCharges\"], errors=\"coerce\")\n\n\ndf = df.dropna()"
  },
  {
    "objectID": "posts/DS W3.html#미션-1---수치형-변수를-범주형-변수로-만들기",
    "href": "posts/DS W3.html#미션-1---수치형-변수를-범주형-변수로-만들기",
    "title": "Data Science Week3",
    "section": "미션 1) - 수치형 변수를 범주형 변수로 만들기",
    "text": "미션 1) - 수치형 변수를 범주형 변수로 만들기\n\n월별 지불 금액을 그룹화하여 지불 금액 구간별 경향성을 분석할 수 있습니다. 이러한 수치형 데이터의 범주화는 수치형 데이터에 이상치가 있을 경우, 이를 구간화함으로써 이상치의 영향을 줄일 수 있습니다. 범주화된 데이터는 일반적으로 이해하기 쉽습니다. 그리고 모델이 특정 수치에 과도하게 적합되는 것을 방지할 수 있습니다. 수치형 데이터를 구간으로 나눔으로써 모델이 데이터의 일반적인 패턴을 학습하는 데 집중하도록 할 수 있습니다. 범주화된 데이터는 시각화 및 보고서 작성 시 직관적이고 명확한 정보 전달이 가능합니다. 데이터의 분포, 추세 등을 파악하기에 용이합니다. 데이터의 분포가 불균일할 때, 구간화를 통해 각 범주 내 데이터의 분포를 보다 균일하게 만들 수 있습니다. 위와 같은 이유로 수치형 변수를 범주화 하는 미션을 진행해 보겠습니다.\n수치형 변수를 범주형 변수로 변환합니다.\nMonthlyCharges 를 4개의 구간으로 나눕니다. 구간을 나누는 기준은 시각화 내용을 바탕으로 정하며 기준에 대한 정답이 있지는 않습니다. 구간을 정한 기준을 설명으로 작성하고 구간을 나누는 코드를 작성해 주세요.\n다음과 같이 원본과 구간을 나눈 데이터를 비교해 주세요. 기준이 정해져 있지 않으며 정답이 없으니 자율적으로 나눠 보세요.\n\n\n\n\ncustomerID\nMonthlyCharges\nmonthlycharges_group\n\n\n\n\n7590-VHVEG\n29.85\n0-30\n\n\n5575-GNVDE\n56.95\n30-70\n\n\n3668-QPYBK\n53.85\n30-70\n\n\n7795-CFOCW\n42.3\n30-70\n\n\n9237-HQITU\n70.7\n70-99\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsns.histplot(x='MonthlyCharges', data=df , palette=\"Set1\")\n\n/tmp/ipykernel_19873/276565552.py:1: UserWarning: Ignoring `palette` because no `hue` variable has been assigned.\n  sns.histplot(x='MonthlyCharges', data=df , palette=\"Set1\")\n\n\n&lt;Axes: xlabel='MonthlyCharges', ylabel='Count'&gt;\n\n\n\n\n\n\n# qcut을 bin을 따로 지정하지 않는 경우 빈도가 균일하게 범위를 정한다.\ndf2 = df.assign(monthlycharges_group= lambda df: pd.qcut(df.MonthlyCharges,q=4))\nsns.countplot(x='monthlycharges_group', data=df2 , palette=\"Set1\")\n\n/tmp/ipykernel_19873/169035272.py:3: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.countplot(x='monthlycharges_group', data=df2 , palette=\"Set1\")\n\n\n&lt;Axes: xlabel='monthlycharges_group', ylabel='count'&gt;\n\n\n\n\n\n\nbins = [0, 30, 70, 99, np.inf]\nlabels = ['0-30', '30-70', '70-99', '99+']\ndf2 = df.assign(monthlycharges_group = pd.cut(df.MonthlyCharges, bins=bins, labels=labels))\nsns.countplot(x='monthlycharges_group', data=df2 , palette=\"Set1\")\n\n/tmp/ipykernel_19873/2924682505.py:4: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.countplot(x='monthlycharges_group', data=df2 , palette=\"Set1\")\n\n\n&lt;Axes: xlabel='monthlycharges_group', ylabel='count'&gt;"
  },
  {
    "objectID": "posts/DS W3.html#미션-2---one-hot-encoding-하기",
    "href": "posts/DS W3.html#미션-2---one-hot-encoding-하기",
    "title": "Data Science Week3",
    "section": "미션 2) - One-Hot-Encoding 하기",
    "text": "미션 2) - One-Hot-Encoding 하기\n\nOne-Hot Encoding은 범주형 데이터를 머신러닝 모델이 이해할 수 있는 형태로 변환하는 기술 중 하나입니다. One-Hot Encoding을 사용하면 각 범주 간의 거리가 동일하게 유지됩니다. 즉, 범주 간의 유사성을 측정할 때 각 범주가 동일한 거리로 취급되므로 모델이 범주 간의 관계를 더 정확하게 학습할 수 있습니다. One-Hot Encoding은 범주의 수에 따라 적절한 차원을 생성하므로 데이터가 새로운 범주로 확장되거나 변할 때 모델이 쉽게 일반화될 수 있습니다. 각 범주가 독립된 차원으로 표현되므로, 모델의 예측이나 특성 중요도를 해석할 때 각 범주에 대한 기여를 명확하게 파악할 수 있습니다. 라벨 인코딩과 같은 다른 방법들이 범주 간의 임의의 순서를 생성할 수 있는 반면, One-hot encoding은 이러한 문제를 방지하고 모델이 데이터를 오해하는 것을 막습니다. 하지만, One-hot encoding은 범주의 수가 매우 많을 때 차원의 저주(curse of dimensionality)를 초래하거나, 데이터가 희소해질 수 있으므로 적용 시 이러한 점을 고려해야 합니다. 다음의 예시처럼 데이터를 One-Hot-Encoding 해주세요.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncustomerID\nSeniorCitizen\ntenure\nTotalCharges\ngender_Female\ngender_Male\nPartner_No\nPartner_Yes\nDependents_No\nDependents_Yes\nPhoneService_No\n\n\n\n\n7590-VHVEG\n0\n1\n29.85\n1\n0\n0\n1\n1\n0\n1\n\n\n5575-GNVDE\n0\n34\n1889.5\n0\n1\n1\n0\n1\n0\n0\n\n\n3668-QPYBK\n0\n2\n108.15\n0\n1\n1\n0\n1\n0\n0\n\n\n7795-CFOCW\n0\n45\n1840.75\n0\n1\n1\n0\n1\n0\n1\n\n\n9237-HQITU\n0\n2\n151.65\n1\n0\n1\n0\n1\n0\n0\n\n\n\n\ndf3 = df.assign(gender_Male = lambda df: df['gender'].apply(lambda x: 1 if x == 'Male' else 0))\\\n.assign(gender_Female = lambda df: df['gender'].apply(lambda x: 1 if x == 'Female' else 0))\\\n.assign(Partner_Yes = lambda df: df['Partner'].apply(lambda x: 1 if x == 'Yes' else 0))\\\n.assign(Partner_No = lambda df: df['Partner'].apply(lambda x: 1 if x == 'No' else 0))\\\n.assign(Dependents_Yes = lambda df: df['Dependents'].apply(lambda x: 1 if x == 'Yes' else 0))\\\n.assign(Dependents_No = lambda df: df['Dependents'].apply(lambda x: 1 if x == 'No' else 0))\\\n.assign(PhoneService_Yes = lambda df: df['PhoneService'].apply(lambda x: 1 if x == 'Yes' else 0))\\\n.assign(PhoneService_No = lambda df: df['PhoneService'].apply(lambda x: 1 if x == 'No' else 0))\\\n.loc[:,['SeniorCitizen', 'tenure', 'TotalCharges', 'gender_Female', 'gender_Male', 'Partner_No', 'Partner_Yes', 'Dependents_No', 'Dependents_Yes', 'PhoneService_No', 'PhoneService_Yes']]\ndf3.head()\n\n\n\n\n\n\n\n\nSeniorCitizen\ntenure\nTotalCharges\ngender_Female\ngender_Male\nPartner_No\nPartner_Yes\nDependents_No\nDependents_Yes\nPhoneService_No\nPhoneService_Yes\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\n0\n1\n29.85\n1\n0\n0\n1\n1\n0\n1\n0\n\n\n5575-GNVDE\n0\n34\n1889.50\n0\n1\n1\n0\n1\n0\n0\n1\n\n\n3668-QPYBK\n0\n2\n108.15\n0\n1\n1\n0\n1\n0\n0\n1\n\n\n7795-CFOCW\n0\n45\n1840.75\n0\n1\n1\n0\n1\n0\n1\n0\n\n\n9237-HQITU\n0\n2\n151.65\n1\n0\n1\n0\n1\n0\n0\n1"
  },
  {
    "objectID": "posts/DS W3.html#미션-3---여러-피처-엔지니어링-기법을-적용하고-통신사-고객-이탈여부에-대한-모델의-성능을-accuracy로-평가해-주세요.",
    "href": "posts/DS W3.html#미션-3---여러-피처-엔지니어링-기법을-적용하고-통신사-고객-이탈여부에-대한-모델의-성능을-accuracy로-평가해-주세요.",
    "title": "Data Science Week3",
    "section": "미션 3) - 여러 피처 엔지니어링 기법을 적용하고 통신사 고객 이탈여부에 대한 모델의 성능을 Accuracy로 평가해 주세요.",
    "text": "미션 3) - 여러 피처 엔지니어링 기법을 적용하고 통신사 고객 이탈여부에 대한 모델의 성능을 Accuracy로 평가해 주세요.\n\n이 미션은 데이터 전처리와 피처 엔지니어링의 중요성을 이해하고, 실제 비즈니스 문제에 적용할 수 있는 머신러닝 모델을 개발하는 데 중점을 둡니다. 통신사 고객 데이터를 활용하여 고객의 이탈 여부를 예측하는 머신러닝 모델을 개발하고, 여러 피처 엔지니어링 기법을 적용하여 모델의 정확도(Accuracy)를 높여보세요. 고객 이탈 여부 예측은 통신사에 있어 중요한 비즈니스 문제로, 고객 유지 전략 수립에 큰 영향을 미칩니다.\n피처엔지니어링을 진행하고 모델의 성능을 평가합니다.\n모델은 트리계열 모델 외 다른 모델을 사용해도 됩니다.\n\n\nX = df3\ny = df[[\"Churn\"]]\ndisplay(X.head(2))\ndisplay(y.head(2))\nX.shape, y.shape\n\n\n\n\n\n\n\n\nSeniorCitizen\ntenure\nTotalCharges\ngender_Female\ngender_Male\nPartner_No\nPartner_Yes\nDependents_No\nDependents_Yes\nPhoneService_No\nPhoneService_Yes\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\n0\n1\n29.85\n1\n0\n0\n1\n1\n0\n1\n0\n\n\n5575-GNVDE\n0\n34\n1889.50\n0\n1\n1\n0\n1\n0\n0\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChurn\n\n\ncustomerID\n\n\n\n\n\n7590-VHVEG\nNo\n\n\n5575-GNVDE\nNo\n\n\n\n\n\n\n\n((7032, 11), (7032, 1))\n\n\n\n# train 과 test 로 나누기 위해 데이터를 80:20으로 나눔\nsplit_count = int(df.shape[0] * 0.8)\n\n# 데이터의 80:20으로 데이터(X)를 train, test로 나눔\n# 데이터의 80:20으로 정답 데이터(y)를 train, test로 나눔\nX_train = X.iloc[:split_count]\ny_train = y.iloc[:split_count]\n\nX_test = X.iloc[split_count:]\ny_test = y.iloc[split_count:]\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape\n\n((5625, 11), (1407, 11), (5625, 1), (1407, 1))\n\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(criterion=\"entropy\",\n                               max_depth=7,\n                               max_features=0.95,\n                               random_state=42)\nmodel.fit(X_train, y_train)\n\nDecisionTreeClassifier(criterion='entropy', max_depth=7, max_features=0.95,\n                       random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.DecisionTreeClassifierDecisionTreeClassifier(criterion='entropy', max_depth=7, max_features=0.95,\n                       random_state=42)\n\n\n\ny_predict = model.predict(X_test)\ny_predict[:5]\n\narray(['No', 'No', 'No', 'No', 'No'], dtype=object)\n\n\n\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_predict)\n\n0.7818052594171997"
  }
]