[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/DS W1.html",
    "href": "posts/DS W1.html",
    "title": "Data Science Week1",
    "section": "",
    "text": "머신러닝 모델을 실행하는 기본 과정을 이해하기 (학습 =&gt; 예측 =&gt; 평가)\n학습(fit)과 예측(predict)을 하고 평가를 하는 방법\n머신러닝 알고리즘 중에 좋은 성능을 내는 boosting 알고리즘의 기본이 되는 DecisionTree 를 사\nDecisionTree 의 기본적인 원리 이해하기\n\n\n\n\n\n통신사 고객 이탈 정보 : Kaggle 데이터셋( https://www.kaggle.com/blastchar/telco-customer-churn )\n구성 : 고객 인구 통계 정보, 고객 이탈, 서비스 가입 정보, 고객 계정 정보 등등\n\n\n\n\n\n이탈 예측 모델링, 고객 세분화, 원인 분석, 추천 시스템 개선, 고객 유지 전략 개발 등등\n\n\n\n\n\n# 필요한 라이브러리를 로드\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# 데이터 로드\ndf = pd.read_csv(\"https://bit.ly/telco-csv\", index_col=\"customerID\")\ndf.head(2)\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\nDeviceProtection\nTechSupport\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\nFemale\n0\nYes\nNo\n1\nNo\nNo phone service\nDSL\nNo\nYes\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n29.85\n29.85\nNo\n\n\n5575-GNVDE\nMale\n0\nNo\nNo\n34\nYes\nNo\nDSL\nYes\nNo\nYes\nNo\nNo\nNo\nOne year\nNo\nMailed check\n56.95\n1889.5\nNo\n\n\n\n\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 7043 entries, 7590-VHVEG to 3186-AJIEK\nData columns (total 20 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   gender            7043 non-null   object \n 1   SeniorCitizen     7043 non-null   int64  \n 2   Partner           7043 non-null   object \n 3   Dependents        7043 non-null   object \n 4   tenure            7043 non-null   int64  \n 5   PhoneService      7043 non-null   object \n 6   MultipleLines     7043 non-null   object \n 7   InternetService   7043 non-null   object \n 8   OnlineSecurity    7043 non-null   object \n 9   OnlineBackup      7043 non-null   object \n 10  DeviceProtection  7043 non-null   object \n 11  TechSupport       7043 non-null   object \n 12  StreamingTV       7043 non-null   object \n 13  StreamingMovies   7043 non-null   object \n 14  Contract          7043 non-null   object \n 15  PaperlessBilling  7043 non-null   object \n 16  PaymentMethod     7043 non-null   object \n 17  MonthlyCharges    7043 non-null   float64\n 18  TotalCharges      7043 non-null   object \n 19  Churn             7043 non-null   object \ndtypes: float64(1), int64(2), object(17)\nmemory usage: 1.1+ MB\n\n\n\n# 숫자형태의 문자열을 숫자형으로 전환\ndf[\"TotalCharges\"] = df[\"TotalCharges\"].str.strip().replace(\"\", np.nan).astype(float)\n\n\n# 결측치 제거(결측치를 채우는 방법도 존재한다)\ndf = df.dropna()\ndf.isnull().sum().sum()\n\n0\n\n\n\n# 바이너리 변수 인코딩을 위해 범주 값이 2개로 되어 있는 이진값으로 인코딩이 가능한 변수 탐색\nnuniq = df.nunique()\nbi_cols = nuniq[nuniq == 2].index\nbi_cols\n\nIndex(['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'PhoneService',\n       'PaperlessBilling', 'Churn'],\n      dtype='object')\n\n\n\n# 바이너리 변수에 대한 인코딩\ndf[\"gender_encode\"] = (df[\"gender\"] == \"Male\").astype(int)\ndf[\"Partner_encode\"] = (df[\"Partner\"] == \"Yes\").astype(int)\ndf[\"Dependents_encode\"] = (df[\"Dependents\"] == \"Yes\").astype(int)\ndf[\"PhoneService_encode\"] = (df[\"PhoneService\"] == \"Yes\").astype(int)\ndf[\"PaperlessBilling_encode\"] = (df[\"PaperlessBilling\"] == \"Yes\").astype(int)\ndf\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\n...\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\ngender_encode\nPartner_encode\nDependents_encode\nPhoneService_encode\nPaperlessBilling_encode\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\nFemale\n0\nYes\nNo\n1\nNo\nNo phone service\nDSL\nNo\nYes\n...\nYes\nElectronic check\n29.85\n29.85\nNo\n0\n1\n0\n0\n1\n\n\n5575-GNVDE\nMale\n0\nNo\nNo\n34\nYes\nNo\nDSL\nYes\nNo\n...\nNo\nMailed check\n56.95\n1889.50\nNo\n1\n0\n0\n1\n0\n\n\n3668-QPYBK\nMale\n0\nNo\nNo\n2\nYes\nNo\nDSL\nYes\nYes\n...\nYes\nMailed check\n53.85\n108.15\nYes\n1\n0\n0\n1\n1\n\n\n7795-CFOCW\nMale\n0\nNo\nNo\n45\nNo\nNo phone service\nDSL\nYes\nNo\n...\nNo\nBank transfer (automatic)\n42.30\n1840.75\nNo\n1\n0\n0\n0\n0\n\n\n9237-HQITU\nFemale\n0\nNo\nNo\n2\nYes\nNo\nFiber optic\nNo\nNo\n...\nYes\nElectronic check\n70.70\n151.65\nYes\n0\n0\n0\n1\n1\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n6840-RESVB\nMale\n0\nYes\nYes\n24\nYes\nYes\nDSL\nYes\nNo\n...\nYes\nMailed check\n84.80\n1990.50\nNo\n1\n1\n1\n1\n1\n\n\n2234-XADUH\nFemale\n0\nYes\nYes\n72\nYes\nYes\nFiber optic\nNo\nYes\n...\nYes\nCredit card (automatic)\n103.20\n7362.90\nNo\n0\n1\n1\n1\n1\n\n\n4801-JZAZL\nFemale\n0\nYes\nYes\n11\nNo\nNo phone service\nDSL\nYes\nNo\n...\nYes\nElectronic check\n29.60\n346.45\nNo\n0\n1\n1\n0\n1\n\n\n8361-LTMKD\nMale\n1\nYes\nNo\n4\nYes\nYes\nFiber optic\nNo\nNo\n...\nYes\nMailed check\n74.40\n306.60\nYes\n1\n1\n0\n1\n1\n\n\n3186-AJIEK\nMale\n0\nNo\nNo\n66\nYes\nNo\nFiber optic\nYes\nNo\n...\nYes\nBank transfer (automatic)\n105.65\n6844.50\nNo\n1\n0\n0\n1\n1\n\n\n\n\n7032 rows × 25 columns\n\n\n\n\n\n\n\n# 학습 예측에 사용할 열 추출\nfeature_names = df.select_dtypes(include=\"number\").columns\nfeature_names\n\nIndex(['SeniorCitizen', 'tenure', 'MonthlyCharges', 'TotalCharges',\n       'gender_encode', 'Partner_encode', 'Dependents_encode',\n       'PhoneService_encode', 'PaperlessBilling_encode'],\n      dtype='object')\n\n\n\nX = df[feature_names]\ny = df[[\"Churn\"]]\ndisplay(X.head(2))\ndisplay(y.head(2))\nX.shape, y.shape\n\n\n\n\n\n\n\n\nSeniorCitizen\ntenure\nMonthlyCharges\nTotalCharges\ngender_encode\nPartner_encode\nDependents_encode\nPhoneService_encode\nPaperlessBilling_encode\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\n0\n1\n29.85\n29.85\n0\n1\n0\n0\n1\n\n\n5575-GNVDE\n0\n34\n56.95\n1889.50\n1\n0\n0\n1\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChurn\n\n\ncustomerID\n\n\n\n\n\n7590-VHVEG\nNo\n\n\n5575-GNVDE\nNo\n\n\n\n\n\n\n\n((7032, 9), (7032, 1))\n\n\n\n# train 과 test 로 나누기 위해 데이터를 80:20으로 나눔\nsplit_count = int(df.shape[0] * 0.8)\nsplit_count\n\n5625\n\n\n\n# 데이터의 80:20으로 데이터(X)를 train, test로 나눔\n# 데이터의 80:20으로 정답 데이터(y)를 train, test로 나눔\nX_train = X.iloc[:split_count]\ny_train = y.iloc[:split_count]\n\nX_test = X.iloc[split_count:]\ny_test = y.iloc[split_count:]\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape\n\n((5625, 9), (1407, 9), (5625, 1), (1407, 1))\n\n\n\n\n\n\n# 모델 학습\nfrom sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(criterion=\"entropy\",\n                               max_depth=6,\n                               max_features=0.9,\n                               random_state=42)\nmodel.fit(X_train, y_train)\n\nDecisionTreeClassifier(criterion='entropy', max_depth=6, max_features=0.9,\n                       random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.DecisionTreeClassifierDecisionTreeClassifier(criterion='entropy', max_depth=6, max_features=0.9,\n                       random_state=42)\n\n\n\ny_predict = model.predict(X_test)\ny_predict[:5]\n\narray(['No', 'No', 'No', 'No', 'No'], dtype=object)\n\n\n\n\n\n\n# 네트워크 시각화\nfrom sklearn.tree import plot_tree\nplt.figure(figsize=(20, 10))\nplot_tree(model, filled=True, feature_names=X_train.columns, class_names=['No','Yes'], max_depth=3)\n\n[Text(0.5, 0.9, 'tenure &lt;= 19.5\\nentropy = 0.834\\nsamples = 5625\\nvalue = [4137, 1488]\\nclass = No'),\n Text(0.25, 0.7, 'MonthlyCharges &lt;= 68.425\\nentropy = 0.989\\nsamples = 2242\\nvalue = [1258, 984]\\nclass = No'),\n Text(0.125, 0.5, 'tenure &lt;= 3.5\\nentropy = 0.854\\nsamples = 1223\\nvalue = [882, 341]\\nclass = No'),\n Text(0.0625, 0.3, 'MonthlyCharges &lt;= 20.875\\nentropy = 0.985\\nsamples = 487\\nvalue = [279, 208]\\nclass = No'),\n Text(0.03125, 0.1, '\\n  (...)  \\n'),\n Text(0.09375, 0.1, '\\n  (...)  \\n'),\n Text(0.1875, 0.3, 'MonthlyCharges &lt;= 27.425\\nentropy = 0.682\\nsamples = 736\\nvalue = [603, 133]\\nclass = No'),\n Text(0.15625, 0.1, '\\n  (...)  \\n'),\n Text(0.21875, 0.1, '\\n  (...)  \\n'),\n Text(0.375, 0.5, 'TotalCharges &lt;= 120.0\\nentropy = 0.95\\nsamples = 1019\\nvalue = [376, 643]\\nclass = Yes'),\n Text(0.3125, 0.3, 'TotalCharges &lt;= 69.875\\nentropy = 0.672\\nsamples = 187\\nvalue = [33, 154]\\nclass = Yes'),\n Text(0.28125, 0.1, '\\n  (...)  \\n'),\n Text(0.34375, 0.1, '\\n  (...)  \\n'),\n Text(0.4375, 0.3, 'MonthlyCharges &lt;= 73.675\\nentropy = 0.978\\nsamples = 832\\nvalue = [343, 489]\\nclass = Yes'),\n Text(0.40625, 0.1, '\\n  (...)  \\n'),\n Text(0.46875, 0.1, '\\n  (...)  \\n'),\n Text(0.75, 0.7, 'MonthlyCharges &lt;= 69.975\\nentropy = 0.607\\nsamples = 3383\\nvalue = [2879, 504]\\nclass = No'),\n Text(0.625, 0.5, 'MonthlyCharges &lt;= 28.55\\nentropy = 0.319\\nsamples = 1435\\nvalue = [1352, 83]\\nclass = No'),\n Text(0.5625, 0.3, 'tenure &lt;= 61.5\\nentropy = 0.116\\nsamples = 706\\nvalue = [695, 11]\\nclass = No'),\n Text(0.53125, 0.1, '\\n  (...)  \\n'),\n Text(0.59375, 0.1, '\\n  (...)  \\n'),\n Text(0.6875, 0.3, 'tenure &lt;= 60.5\\nentropy = 0.465\\nsamples = 729\\nvalue = [657, 72]\\nclass = No'),\n Text(0.65625, 0.1, '\\n  (...)  \\n'),\n Text(0.71875, 0.1, '\\n  (...)  \\n'),\n Text(0.875, 0.5, 'TotalCharges &lt;= 3764.7\\nentropy = 0.753\\nsamples = 1948\\nvalue = [1527, 421]\\nclass = No'),\n Text(0.8125, 0.3, 'PaperlessBilling_encode &lt;= 0.5\\nentropy = 0.934\\nsamples = 660\\nvalue = [429, 231]\\nclass = No'),\n Text(0.78125, 0.1, '\\n  (...)  \\n'),\n Text(0.84375, 0.1, '\\n  (...)  \\n'),\n Text(0.9375, 0.3, 'tenure &lt;= 70.5\\nentropy = 0.604\\nsamples = 1288\\nvalue = [1098, 190]\\nclass = No'),\n Text(0.90625, 0.1, '\\n  (...)  \\n'),\n Text(0.96875, 0.1, '\\n  (...)  \\n')]\n\n\n\n\n\n\n\n\n\n\n# 피처의 중요도 시각화\nsns.barplot(x=model.feature_importances_, y=feature_names,palette='viridis')\n\n/tmp/ipykernel_9474/2619136544.py:2: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(x=model.feature_importances_, y=feature_names,palette='viridis')\n\n\n\n\n\n\n\n\n\n\n# 예측과 실제 정답으로 정확도 확인\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_predict)\n\n0.7896233120113717"
  },
  {
    "objectID": "posts/DS W1.html#학습-목표",
    "href": "posts/DS W1.html#학습-목표",
    "title": "Data Science Week1",
    "section": "",
    "text": "머신러닝 모델을 실행하는 기본 과정을 이해하기 (학습 =&gt; 예측 =&gt; 평가)\n학습(fit)과 예측(predict)을 하고 평가를 하는 방법\n머신러닝 알고리즘 중에 좋은 성능을 내는 boosting 알고리즘의 기본이 되는 DecisionTree 를 사\nDecisionTree 의 기본적인 원리 이해하기"
  },
  {
    "objectID": "posts/DS W1.html#데이터셋",
    "href": "posts/DS W1.html#데이터셋",
    "title": "Data Science Week1",
    "section": "",
    "text": "통신사 고객 이탈 정보 : Kaggle 데이터셋( https://www.kaggle.com/blastchar/telco-customer-churn )\n구성 : 고객 인구 통계 정보, 고객 이탈, 서비스 가입 정보, 고객 계정 정보 등등"
  },
  {
    "objectID": "posts/DS W1.html#이번-학습을-적용시킬-수-있는-현실-문제",
    "href": "posts/DS W1.html#이번-학습을-적용시킬-수-있는-현실-문제",
    "title": "Data Science Week1",
    "section": "",
    "text": "이탈 예측 모델링, 고객 세분화, 원인 분석, 추천 시스템 개선, 고객 유지 전략 개발 등등"
  },
  {
    "objectID": "posts/DS W1.html#실습",
    "href": "posts/DS W1.html#실습",
    "title": "Data Science Week1",
    "section": "",
    "text": "# 필요한 라이브러리를 로드\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# 데이터 로드\ndf = pd.read_csv(\"https://bit.ly/telco-csv\", index_col=\"customerID\")\ndf.head(2)\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\nDeviceProtection\nTechSupport\nStreamingTV\nStreamingMovies\nContract\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\nFemale\n0\nYes\nNo\n1\nNo\nNo phone service\nDSL\nNo\nYes\nNo\nNo\nNo\nNo\nMonth-to-month\nYes\nElectronic check\n29.85\n29.85\nNo\n\n\n5575-GNVDE\nMale\n0\nNo\nNo\n34\nYes\nNo\nDSL\nYes\nNo\nYes\nNo\nNo\nNo\nOne year\nNo\nMailed check\n56.95\n1889.5\nNo\n\n\n\n\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 7043 entries, 7590-VHVEG to 3186-AJIEK\nData columns (total 20 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   gender            7043 non-null   object \n 1   SeniorCitizen     7043 non-null   int64  \n 2   Partner           7043 non-null   object \n 3   Dependents        7043 non-null   object \n 4   tenure            7043 non-null   int64  \n 5   PhoneService      7043 non-null   object \n 6   MultipleLines     7043 non-null   object \n 7   InternetService   7043 non-null   object \n 8   OnlineSecurity    7043 non-null   object \n 9   OnlineBackup      7043 non-null   object \n 10  DeviceProtection  7043 non-null   object \n 11  TechSupport       7043 non-null   object \n 12  StreamingTV       7043 non-null   object \n 13  StreamingMovies   7043 non-null   object \n 14  Contract          7043 non-null   object \n 15  PaperlessBilling  7043 non-null   object \n 16  PaymentMethod     7043 non-null   object \n 17  MonthlyCharges    7043 non-null   float64\n 18  TotalCharges      7043 non-null   object \n 19  Churn             7043 non-null   object \ndtypes: float64(1), int64(2), object(17)\nmemory usage: 1.1+ MB\n\n\n\n# 숫자형태의 문자열을 숫자형으로 전환\ndf[\"TotalCharges\"] = df[\"TotalCharges\"].str.strip().replace(\"\", np.nan).astype(float)\n\n\n# 결측치 제거(결측치를 채우는 방법도 존재한다)\ndf = df.dropna()\ndf.isnull().sum().sum()\n\n0\n\n\n\n# 바이너리 변수 인코딩을 위해 범주 값이 2개로 되어 있는 이진값으로 인코딩이 가능한 변수 탐색\nnuniq = df.nunique()\nbi_cols = nuniq[nuniq == 2].index\nbi_cols\n\nIndex(['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'PhoneService',\n       'PaperlessBilling', 'Churn'],\n      dtype='object')\n\n\n\n# 바이너리 변수에 대한 인코딩\ndf[\"gender_encode\"] = (df[\"gender\"] == \"Male\").astype(int)\ndf[\"Partner_encode\"] = (df[\"Partner\"] == \"Yes\").astype(int)\ndf[\"Dependents_encode\"] = (df[\"Dependents\"] == \"Yes\").astype(int)\ndf[\"PhoneService_encode\"] = (df[\"PhoneService\"] == \"Yes\").astype(int)\ndf[\"PaperlessBilling_encode\"] = (df[\"PaperlessBilling\"] == \"Yes\").astype(int)\ndf\n\n\n\n\n\n\n\n\ngender\nSeniorCitizen\nPartner\nDependents\ntenure\nPhoneService\nMultipleLines\nInternetService\nOnlineSecurity\nOnlineBackup\n...\nPaperlessBilling\nPaymentMethod\nMonthlyCharges\nTotalCharges\nChurn\ngender_encode\nPartner_encode\nDependents_encode\nPhoneService_encode\nPaperlessBilling_encode\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\nFemale\n0\nYes\nNo\n1\nNo\nNo phone service\nDSL\nNo\nYes\n...\nYes\nElectronic check\n29.85\n29.85\nNo\n0\n1\n0\n0\n1\n\n\n5575-GNVDE\nMale\n0\nNo\nNo\n34\nYes\nNo\nDSL\nYes\nNo\n...\nNo\nMailed check\n56.95\n1889.50\nNo\n1\n0\n0\n1\n0\n\n\n3668-QPYBK\nMale\n0\nNo\nNo\n2\nYes\nNo\nDSL\nYes\nYes\n...\nYes\nMailed check\n53.85\n108.15\nYes\n1\n0\n0\n1\n1\n\n\n7795-CFOCW\nMale\n0\nNo\nNo\n45\nNo\nNo phone service\nDSL\nYes\nNo\n...\nNo\nBank transfer (automatic)\n42.30\n1840.75\nNo\n1\n0\n0\n0\n0\n\n\n9237-HQITU\nFemale\n0\nNo\nNo\n2\nYes\nNo\nFiber optic\nNo\nNo\n...\nYes\nElectronic check\n70.70\n151.65\nYes\n0\n0\n0\n1\n1\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n6840-RESVB\nMale\n0\nYes\nYes\n24\nYes\nYes\nDSL\nYes\nNo\n...\nYes\nMailed check\n84.80\n1990.50\nNo\n1\n1\n1\n1\n1\n\n\n2234-XADUH\nFemale\n0\nYes\nYes\n72\nYes\nYes\nFiber optic\nNo\nYes\n...\nYes\nCredit card (automatic)\n103.20\n7362.90\nNo\n0\n1\n1\n1\n1\n\n\n4801-JZAZL\nFemale\n0\nYes\nYes\n11\nNo\nNo phone service\nDSL\nYes\nNo\n...\nYes\nElectronic check\n29.60\n346.45\nNo\n0\n1\n1\n0\n1\n\n\n8361-LTMKD\nMale\n1\nYes\nNo\n4\nYes\nYes\nFiber optic\nNo\nNo\n...\nYes\nMailed check\n74.40\n306.60\nYes\n1\n1\n0\n1\n1\n\n\n3186-AJIEK\nMale\n0\nNo\nNo\n66\nYes\nNo\nFiber optic\nYes\nNo\n...\nYes\nBank transfer (automatic)\n105.65\n6844.50\nNo\n1\n0\n0\n1\n1\n\n\n\n\n7032 rows × 25 columns"
  },
  {
    "objectID": "posts/DS W1.html#미션1.-훈련데이터와-평가데이터-나누기",
    "href": "posts/DS W1.html#미션1.-훈련데이터와-평가데이터-나누기",
    "title": "Data Science Week1",
    "section": "",
    "text": "# 학습 예측에 사용할 열 추출\nfeature_names = df.select_dtypes(include=\"number\").columns\nfeature_names\n\nIndex(['SeniorCitizen', 'tenure', 'MonthlyCharges', 'TotalCharges',\n       'gender_encode', 'Partner_encode', 'Dependents_encode',\n       'PhoneService_encode', 'PaperlessBilling_encode'],\n      dtype='object')\n\n\n\nX = df[feature_names]\ny = df[[\"Churn\"]]\ndisplay(X.head(2))\ndisplay(y.head(2))\nX.shape, y.shape\n\n\n\n\n\n\n\n\nSeniorCitizen\ntenure\nMonthlyCharges\nTotalCharges\ngender_encode\nPartner_encode\nDependents_encode\nPhoneService_encode\nPaperlessBilling_encode\n\n\ncustomerID\n\n\n\n\n\n\n\n\n\n\n\n\n\n7590-VHVEG\n0\n1\n29.85\n29.85\n0\n1\n0\n0\n1\n\n\n5575-GNVDE\n0\n34\n56.95\n1889.50\n1\n0\n0\n1\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChurn\n\n\ncustomerID\n\n\n\n\n\n7590-VHVEG\nNo\n\n\n5575-GNVDE\nNo\n\n\n\n\n\n\n\n((7032, 9), (7032, 1))\n\n\n\n# train 과 test 로 나누기 위해 데이터를 80:20으로 나눔\nsplit_count = int(df.shape[0] * 0.8)\nsplit_count\n\n5625\n\n\n\n# 데이터의 80:20으로 데이터(X)를 train, test로 나눔\n# 데이터의 80:20으로 정답 데이터(y)를 train, test로 나눔\nX_train = X.iloc[:split_count]\ny_train = y.iloc[:split_count]\n\nX_test = X.iloc[split_count:]\ny_test = y.iloc[split_count:]\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape\n\n((5625, 9), (1407, 9), (5625, 1), (1407, 1))"
  },
  {
    "objectID": "posts/DS W1.html#미션2.-머신러닝-알고리즘-모델로-학습과-예측하기",
    "href": "posts/DS W1.html#미션2.-머신러닝-알고리즘-모델로-학습과-예측하기",
    "title": "Data Science Week1",
    "section": "",
    "text": "# 모델 학습\nfrom sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(criterion=\"entropy\",\n                               max_depth=6,\n                               max_features=0.9,\n                               random_state=42)\nmodel.fit(X_train, y_train)\n\nDecisionTreeClassifier(criterion='entropy', max_depth=6, max_features=0.9,\n                       random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.DecisionTreeClassifierDecisionTreeClassifier(criterion='entropy', max_depth=6, max_features=0.9,\n                       random_state=42)\n\n\n\ny_predict = model.predict(X_test)\ny_predict[:5]\n\narray(['No', 'No', 'No', 'No', 'No'], dtype=object)"
  },
  {
    "objectID": "posts/DS W1.html#미션3.-점수-측정하고-피처의-중요도-시각화",
    "href": "posts/DS W1.html#미션3.-점수-측정하고-피처의-중요도-시각화",
    "title": "Data Science Week1",
    "section": "",
    "text": "# 네트워크 시각화\nfrom sklearn.tree import plot_tree\nplt.figure(figsize=(20, 10))\nplot_tree(model, filled=True, feature_names=X_train.columns, class_names=['No','Yes'], max_depth=3)\n\n[Text(0.5, 0.9, 'tenure &lt;= 19.5\\nentropy = 0.834\\nsamples = 5625\\nvalue = [4137, 1488]\\nclass = No'),\n Text(0.25, 0.7, 'MonthlyCharges &lt;= 68.425\\nentropy = 0.989\\nsamples = 2242\\nvalue = [1258, 984]\\nclass = No'),\n Text(0.125, 0.5, 'tenure &lt;= 3.5\\nentropy = 0.854\\nsamples = 1223\\nvalue = [882, 341]\\nclass = No'),\n Text(0.0625, 0.3, 'MonthlyCharges &lt;= 20.875\\nentropy = 0.985\\nsamples = 487\\nvalue = [279, 208]\\nclass = No'),\n Text(0.03125, 0.1, '\\n  (...)  \\n'),\n Text(0.09375, 0.1, '\\n  (...)  \\n'),\n Text(0.1875, 0.3, 'MonthlyCharges &lt;= 27.425\\nentropy = 0.682\\nsamples = 736\\nvalue = [603, 133]\\nclass = No'),\n Text(0.15625, 0.1, '\\n  (...)  \\n'),\n Text(0.21875, 0.1, '\\n  (...)  \\n'),\n Text(0.375, 0.5, 'TotalCharges &lt;= 120.0\\nentropy = 0.95\\nsamples = 1019\\nvalue = [376, 643]\\nclass = Yes'),\n Text(0.3125, 0.3, 'TotalCharges &lt;= 69.875\\nentropy = 0.672\\nsamples = 187\\nvalue = [33, 154]\\nclass = Yes'),\n Text(0.28125, 0.1, '\\n  (...)  \\n'),\n Text(0.34375, 0.1, '\\n  (...)  \\n'),\n Text(0.4375, 0.3, 'MonthlyCharges &lt;= 73.675\\nentropy = 0.978\\nsamples = 832\\nvalue = [343, 489]\\nclass = Yes'),\n Text(0.40625, 0.1, '\\n  (...)  \\n'),\n Text(0.46875, 0.1, '\\n  (...)  \\n'),\n Text(0.75, 0.7, 'MonthlyCharges &lt;= 69.975\\nentropy = 0.607\\nsamples = 3383\\nvalue = [2879, 504]\\nclass = No'),\n Text(0.625, 0.5, 'MonthlyCharges &lt;= 28.55\\nentropy = 0.319\\nsamples = 1435\\nvalue = [1352, 83]\\nclass = No'),\n Text(0.5625, 0.3, 'tenure &lt;= 61.5\\nentropy = 0.116\\nsamples = 706\\nvalue = [695, 11]\\nclass = No'),\n Text(0.53125, 0.1, '\\n  (...)  \\n'),\n Text(0.59375, 0.1, '\\n  (...)  \\n'),\n Text(0.6875, 0.3, 'tenure &lt;= 60.5\\nentropy = 0.465\\nsamples = 729\\nvalue = [657, 72]\\nclass = No'),\n Text(0.65625, 0.1, '\\n  (...)  \\n'),\n Text(0.71875, 0.1, '\\n  (...)  \\n'),\n Text(0.875, 0.5, 'TotalCharges &lt;= 3764.7\\nentropy = 0.753\\nsamples = 1948\\nvalue = [1527, 421]\\nclass = No'),\n Text(0.8125, 0.3, 'PaperlessBilling_encode &lt;= 0.5\\nentropy = 0.934\\nsamples = 660\\nvalue = [429, 231]\\nclass = No'),\n Text(0.78125, 0.1, '\\n  (...)  \\n'),\n Text(0.84375, 0.1, '\\n  (...)  \\n'),\n Text(0.9375, 0.3, 'tenure &lt;= 70.5\\nentropy = 0.604\\nsamples = 1288\\nvalue = [1098, 190]\\nclass = No'),\n Text(0.90625, 0.1, '\\n  (...)  \\n'),\n Text(0.96875, 0.1, '\\n  (...)  \\n')]\n\n\n\n\n\n\n\n\n\n\n# 피처의 중요도 시각화\nsns.barplot(x=model.feature_importances_, y=feature_names,palette='viridis')\n\n/tmp/ipykernel_9474/2619136544.py:2: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(x=model.feature_importances_, y=feature_names,palette='viridis')\n\n\n\n\n\n\n\n\n\n\n# 예측과 실제 정답으로 정확도 확인\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_predict)\n\n0.7896233120113717"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "2024_Data_Science_Project",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJan 17, 2024\n\n\nData Science Week1\n\n\n유성준 \n\n\n\n\n\nNo matching items"
  }
]